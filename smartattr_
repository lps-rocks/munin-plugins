#!/usr/bin/env python

from collections import OrderedDict
import os
import pickle
import subprocess
import re
import sys
import time

# Get enviornment
statefiledir=os.environ['MUNIN_PLUGSTATE']


class MuninPlugin(object):
    title = ""
    args = None
    vlabel = None
    info = None
    category = None
    fields = []
    warning = None
    critical = None
    def __init__(self):
        if 'GRAPH_TITLE' in os.environ:
            self.title = os.environ['GRAPH_TITLE']
        if 'GRAPH_CATEGORY' in os.environ:
            self.category = os.environ['GRAPH_CATEGORY']
        if 'warning' in os.environ:
            self.warning = os.environ['warning']
        if 'critical' in os.environ:
            self.critical = os.environ['critical']
        super(MuninPlugin, self).__init__()

    def autoconf(self):
        return False

    def config(self):
        conf = []
        for k in ('title', 'category', 'args', 'vlabel', 'info', 'scale', 'order'):
            v = getattr(self, k, None)
            if v is not None:
                if isinstance(v, bool):
                    v = v and "yes" or "no"
                elif isinstance(v, (tuple, list)):
                    v = " ".join(v)
                conf.append('graph_{} {}'.format(k, v))

        for field_name, field_args in self.fields:
            for arg_name, arg_value in field_args.iteritems():
                conf.append('{}.{} {}'.format(field_name, arg_name, arg_value))
            if self.warning is not None:
                conf.append('{}.warning {}'.format(field_name, self.warning))
            if self.critical is not None:
                conf.append('{}.critical {}'.format(field_name, self.critical))
        print("\n".join(conf))

    def suggest(self):
        sys.exit(1)

    def execute(self):
        return None

    def run(self):
        cmd = ((len(sys.argv) > 1) and sys.argv[1] or None) or "execute"
        if cmd == "execute":
            values = self.execute()
            if values:
                for k, v in values.items():
                    print("{}.value {}".format(k, v))
        elif cmd == "autoconf":
            try:
                ac = self.autoconf()
            except Exception, exc:
                print("no ({})".format(str(exc)))
                sys.exit(1)
            if not ac:
                print("no")
                sys.exit(1)
            print("yes")
        elif cmd == "config":
            self.config()
        elif cmd == "suggest":
            self.suggest()
        sys.exit(0)


SMART_ATTRIBUTE_DICTIONARY = {
    '1': ('Read Error Rate', 'Frequency of errors during read operations.'),
    '2': ('Throughput Performance', 'Overall performance of a device.'),
    '3': ('Spin-Up Time', 'Time required a spindle to spin up to operational speed. This parameter is not used with an SSD, because obviously an SSD has no moving parts.'),
    '4': ('Start/Stop Count', 'Estimated remaining life, based on the number of spin-up/spin-down cycles. The value counts down, typically from 100 to 0. The Raw value holds the actual number of cycles.'),
    '5': ('Reallocated Sectors Count', 'The number of the unused spare sectors. When encountering a read/write/check error, a device remaps a bad sector to a "healthy" one taken from a special reserve pool. Normalized value of the attribute decreases as the number of available spares decreases.On a regular hard drive, Raw value indicates the number of remapped sectors, which should normally be zero. On an SSD, the Raw value indicates the number of failed flash memory blocks.'),
    '6': ('Read Channel Margin', 'There is no reliable information available about this attribute.'),
    '7': ('Seek Error Rate', 'Frequency of the errors during disk head positioning.'),
    '8': ('Seek Time Performance', "Characterizes performance of mechanical seeks of a disk head. An SSD doesn't use this attribute."),
    '9': ('Power-On Hours Count', 'Estimated remaining lifetime, based on the time a device was powered on. The normalized value decreases over time, typically from 100 to 0. The Raw value shows the actual powered-on time, usually in hours.'),
    '10': ('Spin-up Retries', 'The Raw value of the attribute shows the number of unsuccessful attempts to spin a spindle up to operational speed. For a rotational drive, this is fairly critical. An SSD does not use this attribute because there is nothing to spin up.'),
    '11': ('Calibration Retries', 'A Raw value typically stores the number of unsuccessful read head and positioning system calibrations.'),
    '12': ('Power Cycle Count', 'Estimated remaining life, based on the number of power on/off cycles. The value counts down, typically from 100 to 0. The Raw value holds the actual number of power cycles.'),
    '13': ('Soft Read Error Rate', 'There is no certainity about the meaning of this attribute. Some bits of documentation quote this as the number of errors not corrected by ECC and subsequently reported to the host controller. Others conversely say this is the number of errors corrected by ECC.'),
    '100': ('Erase/Program Cycles', 'The total count of erase/program cycles for entire flash memory in its entire lifetime. An SSD has a limit on how many times one can write to it. The exact values depend on a type and make of the flash memory chip.'),
    '103': ('Translation Table Rebuild', 'The number of events when internal tables of block addresses were damaged and subsequently rebuilt. The Raw value of this attribute indicates the actual event count.'),
    '108': ('Unknown (108)', 'There is no reliable information available about this attribute.'),
    '170': ('Reserved Block Count', 'On an SSD, this attribute describes the state of the reserve block pool. The value of the attribute shows the percentage of the pool remaining. The Raw value sometimes contains the actual number of used reserve blocks.'),
    '171': ('Program Fail Count', 'The number of times when write to a flash memory failed. The write process is technically called "programming the flash memory", hence the attribute name. When the flash memory is worn out, it cannot be written to any longer and becomes read-only. The Raw value shows the actual number of failures.'),
    '172': ('Erase Fail Count', 'The number of times when erase operation on a flash memory failed. The complete write cycle of a flash memory consists of two stages. The memory has to be erased first, and then the data has to be recorded ("programmed") onto the memory. When the flash memory is worn out, it cannot be written to any longer and becomes read-only. The Raw value shows the actual number of failures.'),
    '173': ('Wear Leveller Worst Case Erase Count', 'The maximum number of erase operations performed on a single flash memory block.'),
    '174': ('Unexpected Power Loss', 'The number of unexpected power outages when the power was lost before a command to turn off the disk is received. On a hard drive, the lifetime with respect to such shutdowns is much less than in case of normal shutdown. On an SSD, there is a risk of losing the internal state table when an unexpected shutdown occurs.'),
    '175': ('Program Fail Count', 'The number of times when write to a flash memory failed. The write process is technically called "programming the flash memory", hence the attribute name. When the flash memory is worn out, it cannot be written to any longer and becomes read-only. The Raw value shows the actual number of failures.'),
    '176': ('Erase Fail Count', 'The number of times when erase operation on a flash memory failed. The complete write cycle of a flash memory consists of two stages. The memory has to be erased first, and then the data has to be recorded ("programmed") onto the memory. When the flash memory is worn out, it cannot be written to any longer and becomes read-only. The Raw value shows the actual number of failures.'),
    '177': ('Wear Leveling Count', 'The maximum number of erase operations performed on a single flash memory block.'),
    '178': ('Used Reserved Block Count', 'On an SSD, this attribute describes the state of the reserve block pool. The value of the attribute shows the percentage of the pool remaining. The Raw value sometimes contains the actual number of used reserve blocks.'),
    '179': ('Used Reserved Block Count', 'On an SSD, this attribute describes the state of the reserve block pool. The value of the attribute shows the percentage of the pool remaining. The Raw value sometimes contains the actual number of used reserve blocks.'),
    '180': ('Unused Reserved Block Count', 'On SSD, this attribute describes the state of the reserve block pool. The value of the attribute shows the percentage of the pool remaining. The Raw value sometimes contains the actual number of unused reserve blocks.'),
    '181': ('Program Fail Count', 'The number of times when write to a flash memory failed. The write process is technically called "programming the flash memory", hence the attribute name. When the flash memory is worn out, it cannot be written to any longer and becomes read-only. The Raw value shows the actual number of failures.'),
    '182': ('Erase Fail Count', 'The number of times when erase operation on a flash memory failed. The complete write cycle of a flash memory consists of two stages. The memory has to be erased first, and then the data has to be recorded ("programmed") onto the memory. When the flash memory is worn out, it cannot be written to any longer and becomes read-only. The Raw value shows the actual number of failures.'),
    '183': ('SATA Downshifts', 'Indicates how often it was required to decrease the SATA transmission speed (from 6 Gbps to 3 or 1.5 Gbps, or from 3 Gbps to 1.5  Gbps) in order to transfer data successfully. If the attribute value is decreasing, try replacing the SATA cable.'),
    '184': ('End-to-End error', 'The number of data corruption occurrences in the internal disk cache. The malfunctions of the cache memory, indicated by this attribute, are fairly critical to the proper operation.'),
    '185': ('Head Stability', 'There is no reliable information available about this attribute.'),
    '186': ('Induced Op-Vibration Detection', 'There is no reliable information available about this attribute.'),
    '187': ('Reported Uncorrectable Errors', 'The number of UNC errors, i.e. read errors which Error Correction Code (ECC) failed to recover.'),
    '188': ('Command Timeout', 'The number of operations which were interrupted due to HDD timeout.'),
    '189': ('High Fly Writes', 'The number of write errors caused by the fact that a write head was outside normal range of height above disk platter.'),
    '190': ('Temperature', 'Temperature, monitored by a sensor somewhere inside the drive. Raw value typically holds the actual temperature (hexadecimal) in its rightmost two digits.'),
    '191': ('G-Sense Errors', 'Indicates how many times a disk stopped working due to shock or vibration. Typically, this attribute is used in laptop hard drives. In desktop hard drives, sometimes the attribute is listed but never changes, because apparently the vibration detection circuitry is not available.'),
    '192': ('Power-Off Retract Cycles', 'The number of unexpected power outages when the power was lost before a command to turn off the disk is received. On a hard drive, the lifetime with respect to such shutdowns is much less than in case of normal shutdown. On an SSD, there is a risk of losing the internal state table when an unexpected shutdown occurs.'),
    '193': ('Load/Unload Cycles', 'The number of head movement cycles between the data zone and the head parking area or a dedicated unload ramp.The value counts down, typically from 100 to 0. The Raw value typically holds the actual number of cycles.'),
    '194': ('Temperature', 'Temperature, monitored by a sensor somewhere inside the drive. Raw value typically holds the actual temperature (hexadecimal) in its rightmost two digits.'),
    '195': ('Hardware ECC Recovered', 'The number of errors which were corrected using Error Correction Code.'),
    '196': ('Reallocation Events', 'The total number of reallocation events. This includes both off-line reallocations and reallocations during actual write operations.'),
    '197': ('Current Pending Sectors', 'The number of unstable sectors which are waiting to be re-tested and possibly remapped.'),
    '198': ('Off-line Uncorrectable', 'The number of bad sectors which were detected during offline scan of a disk. When idling, a modern disk starts to test itself, the process known as offline scan, in order to detect possible defects in rarely used surface areas.'),
    '199': ('UDMA CRC Error Rate', 'The number of errors occurring when transferring data via a cable between a disk and a motherboard port. If the value decreases, try replacing the ATA cable. On Parallel ATA drives, avoid "round" cables.'),
    '200': ('Write Error Rate', 'Rate of errors during write.'),
    '201': ('Soft Read Errors', 'There is no certainty about the meaning of this attribute. Some bits of documentation quote this as the number of errors not corrected by ECC and subsequently reported to the host controller. Others conversely say this is the number of errors corrected by ECC.'),
    '202': ('Data Address Mark Errors', 'The number of errors encountered when a read head searches for a requested sector.'),
    '203': ('Run Out Cancel', 'The number of errors caused by incorrect checksum during the error correction.'),
    '204': ('Soft ECC Corrections', 'The number of errors which were corrected using Error Correction Code.'),
    '205': ('Thermal Asperity Rate', 'A rate at which read errors occur due to short-term temperature fluctuations on a hard drive read head.'),
    '206': ('Flying Height', 'Deviation of a head height above the disk surface from the optimal height value. If a head is too close to the disk surface, there is a risk of mechanical damage. If a head is too far from the disk surface, read/write errors may happen.'),
    '207': ('Spin High Current', 'Amount of current needed to spin a hard disk up. Only used in rotational hard drives.'),
    '209': ('Offline Seek Performance', 'Characterizes performance of seek operations of a disk head measured during an offline scan.'),
    '220': ('Disk Shift', 'Distance the disk has shifted in relation to the theoretical spindle axis due to mechanical damage or overheating.'),
    '221': ('G-Sense Error Rate', 'Indicates how many times a disk stopped working due to shock or vibration. Typically, this attribute is used in laptop hard drives. In desktop hard drives, sometimes the attribute is listed but never changes, because apparently the vibration detection circuitry is not available.'),
    '222': ('Loaded Hours', 'Time a disk head spent in the data zone, rather than in the parking area or on a head ramp. The value counts down, typically from 100 to 0. The Raw value often holds the actual number of hours.'),
    '223': ('Load/Unload Retries', 'The number of failures when moving a head from the data area to the parking area and vice versa.'),
    '224': ('Load Friction', 'Friction associated with moving a head between the data area and the parking area, especially for the disks with dedicated unload ramp.'),
    '225': ('Load/Unload Cycles', 'The number of head movement cycles between the data zone and the head parking area or a dedicated unload ramp.The value counts down, typically from 100 to 0. The Raw value typically holds the actual number of cycles.'),
    '226': ('Load-in Time', 'Time a disk head spent in the data zone, rather than in the parking area or on a head ramp. The value counts down, typically from 100 to 0. The Raw value often holds the actual number of hours.'),
    '227': ('Torque Amplification Count', 'Indicates how many times it was required to use high current to spin a hard disk up or to maintain rotational speed.'),
    '228': ('Power-Off Retracts', 'The number of unexpected power outages when the power was lost before a command to turn off the disk is received. On a hard drive, the lifetime with respect to such shutdowns is much less than in case of normal shutdown. On an SSD, there is a risk of losing the internal state table when an unexpected shutdown occurs.'),
    '230': ('GMR Head Amplitude', 'Amplitude of disk head oscillations.'),
    '231': ('Temperature', 'Temperature, monitored by a sensor somewhere inside the drive. Raw value typically holds the actual temperature (hexadecimal) in its rightmost two digits.'),
    '232': ('Available Reserved Space', 'The attribute is used in SSDs to denote the remaining reserved space. The value counts down, typically from 100 to 0. The Raw value is vendor-specific.'),
    '233': ('Media Wearout Indicator', 'Remaining flash memory life (on an SSD).'),
    '240': ('Head Flying Hours', 'Time a disk head spent in the data zone, rather than in the parking area or on a head ramp. The value counts down, typically from 100 to 0. The Raw value often holds the actual number of hours.'),
    '241': ('Total LBAs Written', 'The total number of 512-byte sectors written during the entire lifetime of the device.'),
    '242': ('Total LBAs Read', 'The total number of 512-byte sectors read during the entire lifetime of the device.'),
    '250': ('Read Error Retry Rate', 'There is no reliable information available about this attribute.')
}


class SmartAttrPlugin(MuninPlugin):
    category = "sensors"
    args = "-l 0 --base 1000"
    vlabel = "Value"

    @property
    def title(self):
        return "S.M.A.R.T. Attribute: {}".format(SMART_ATTRIBUTE_DICTIONARY[self.smartattribute][0])

    @property
    def info(self):
        return SMART_ATTRIBUTE_DICTIONARY[self.smartattribute][1]

    @property
    def fields(self):
        f = []
        d = self.smartdata.keys()
        d.sort()
        for drive in d:
            if drive in self.smartdata and self.smartdata[drive] is not None:
                if 'attributes' in self.smartdata[drive]:
                    if self.smartattribute in self.smartdata[drive]['attributes']:
                        f.append((drive, {'label': "{} - {} ({})".format(self.smartdata[drive]['model'], self.smartdata[drive]['serial'], drive), 'type': 'GAUGE', 'min': '0'}))
        return f

    def __init__(self, argv=(), env=None, debug=False):
        MuninPlugin.__init__(self)

        # Determine which attribute to monitor
        self.smartattribute = sys.argv[0].rsplit('_', 1)[-1]

        # Grab the data needed to run this plugin
        lock = None
        for x in range(0, 300):
            try:
                # Acquire a lock
                lock = os.open(os.path.join(statefiledir, "smart-attr-plugin.lock"), os.O_CREAT | os.O_WRONLY | os.O_EXCL)

                # Get list of drives
                self.drives = self.drivelist()

                # Get information about drives
                self.smartdata = {}
                for drive in self.drives:
                    self.smartdata[drive] = self.getsmartdata(drive)
                break
            except OSError as e:
                print(e)
                time.sleep(1)
                continue
            finally:
                if lock is not None:
                    os.close(lock)
                    os.remove(os.path.join(statefiledir, "smart-attr-plugin.lock"))


    def getsmartdata(self, drive):
        # Drive Data path
        data_path = os.path.join(statefiledir, "smart-attr-drive-{}.data".format(drive))

        # If the data exists and it's fresh enough return it from the pickle
        if os.path.exists(data_path) and os.stat(data_path).st_mtime > (time.time() - 240):
            with open(data_path, "r") as data_file:
                return pickle.load(data_file)

        # Get the data from Smart and return it
        try:
            FNULL = open('/dev/null', 'w')
            r = subprocess.Popen(['smartctl', '-Ai', "/dev/{}".format(drive)], stdin=None, stderr=FNULL, stdout=subprocess.PIPE)
            ret = r.communicate()[0]
            drive_data = {'serial': None, 'model': None, 'attributes': {}}

            # Drive serial number
            try:
                match = re.search(r'Serial\s+Number:\s+(?P<serial>.*)', ret).groupdict()
                drive_data['serial'] = match['serial']
            except:
                pass

            # Drive model number
            try:
                match = re.search(r'Device\s+Model:\s+(?P<model>.*)', ret).groupdict()
                drive_data['model'] = match['model']
            except:
                pass

            try:
                # Parse the data
                for m in re.findall(r'\s*(?P<id>[0-9]{1,3})\s[A-Za-z_-]+\s+[0-9a-fx]+\s+[0-9]+\s+[0-9]+\s+[0-9]+\s+[A-Za-z_-]+\s+[A-Za-z_-]+\s+[0-9A-Za-z_-]+\s+(?P<value>[0-9]+)', ret):
                    drive_data['attributes'][m[0]] = m[1]
            except:
                pass

            # Save the resulting data
            with open(data_path, "w") as data_file:
                pickle.dump(drive_data, data_file)

            # Return the resulting data
            return drive_data

        except subprocess.CalledProcessError as e:
            print(e)
            return None

    def drivelist(self):
        # Drive Data path
        data_path = os.path.join(statefiledir, "smart-attr-list.data")

        # If the data exists and it's fresh enough return it from the pickle
        if os.path.exists(data_path) and os.stat(data_path).st_mtime > (time.time() - 3600):
            with open(data_path, "r") as data_file:
                return pickle.load(data_file)

        # Get the data from Smart and return it
        try:
            ret = subprocess.check_output(['lsblk', '-dnro', 'NAME', '-e', '7'], stderr=subprocess.STDOUT)
            drives = filter(None, ret.split("\n"))

            # Save the resulting data
            with open(data_path, "w") as data_file:
                pickle.dump(drives, data_file)

            # Return the resulting data
            return drives

        except subprocess.CalledProcessError:
            return None

    def execute(self):
        f = OrderedDict()
        d = self.smartdata.keys()
        d.sort()
        for drive in d:
            if self.smartdata[drive] is not None and self.smartattribute in self.smartdata[drive]['attributes']:
                f[drive] = self.smartdata[drive]['attributes'][self.smartattribute]
        return f


# Run the plugin
if __name__ == "__main__":
    SmartAttrPlugin().run()

